"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9747],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,m=c["".concat(s,".").concat(g)]||c[g]||u[g]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7597:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2,description:"How to get a secure server notifications endpoint."},o="Routing",l={unversionedId:"get-started/routing",id:"get-started/routing",title:"Routing",description:"How to get a secure server notifications endpoint.",source:"@site/docs/get-started/routing.mdx",sourceDirName:"get-started",slug:"/get-started/routing",permalink:"/laravel-iap-docs/docs/get-started/routing",draft:!1,editUrl:"https://github.com/imdhemy/laravel-iap-docs/blob/master/docs/get-started/routing.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"How to get a secure server notifications endpoint."},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/laravel-iap-docs/docs/get-started/installation"},next:{title:"Event Listeners",permalink:"/laravel-iap-docs/docs/get-started/event-listeners"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Generate a signed URL",id:"generate-a-signed-url",level:2},{value:"Validating a signed route requests",id:"validating-a-signed-route-requests",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"routing"},"Routing"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Liap provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"liap.serverNotifications")," to receive\nthe ",(0,a.kt)("a",{parentName:"p",href:"/docs/category/server-notifications"},"Server notifications")," from different providers. This route uses a query\nvariable ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," to define the service provider."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Provider"),(0,a.kt)("th",{parentName:"tr",align:null},"URI"),(0,a.kt)("th",{parentName:"tr",align:null},"Query Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Google Play"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/liap/notifications?provider=google-play")),(0,a.kt)("td",{parentName:"tr",align:null},"google-play")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"App Store"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/liap/notifications?provider=app-store")),(0,a.kt)("td",{parentName:"tr",align:null},"app-store")))),(0,a.kt)("p",null,"You can add custom configurations to this endpoint through the ",(0,a.kt)("inlineCode",{parentName:"p"},"routing")," key in the config file ",(0,a.kt)("inlineCode",{parentName:"p"},"liap.php"),". For\ninstance, you can assign a ",(0,a.kt)("a",{parentName:"p",href:"https://laravel.com/docs/middleware"},"middleware")," or add a custom route prefix."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="config/liap.php"',title:'"config/liap.php"'},"[\n    'routing' => [\n        'signed' => false,\n        'middleware' => 'my_middleware',\n        'prefix' => 'my_prefix'\n    ],\n\n    // .. Other configurations are trimmed\n]\n")),(0,a.kt)("h2",{id:"generate-a-signed-url"},"Generate a signed URL"),(0,a.kt)("p",null,'In order to set up the server notifications, the service provider asks you to provide a URL to receive the server\nnotifications. LIAP allows you to easily create a "signed" URL which have a "signature" hash appended to the query\nstring. This allows LIAP/Laravel to verify that the URL has not been modified since it was created.'),(0,a.kt)("p",null,"You can generate them using the following composer command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"php artisan liap:url\n")),(0,a.kt)("p",null,"It will ask for the provider:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Select provider:\n  [0] All Providers\n  [1] App Store\n  [2] Google Play\n >\n")),(0,a.kt)("p",null,"If you didn't enable signed URLs, it will ask for your confirmation to\ngenerate signed URLs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"Select provider:\n  [0] All Providers\n  [1] App Store\n  [2] Google Play\n > 0\n\n Signed routes are disabled. Do you want to generate signed routes? (yes/no) [no]:\n > yes\n")),(0,a.kt)("p",null,"Based on your answers, it will generate a table with the following columns:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"+-------------+--------------------------------------------------------------------------------------+\n| Provider    | URL                                                                                  |\n+-------------+--------------------------------------------------------------------------------------+\n| App Store   | https://yourdomain.com/liap/notifications?signature=<signature>&provider=app-store   |\n| Google Play | https://yourdomain.com/liap/notifications?signature=<signature>&provider=google-play |\n+-------------+--------------------------------------------------------------------------------------+\n")),(0,a.kt)("p",null,"The generated URLs will be used to receive the ",(0,a.kt)("a",{parentName:"p",href:"/docs/category/server-notifications"},"server notifications"),"."),(0,a.kt)("p",null,"If the URLs start with ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost"),", you should modify your Laravel configuration, typically by setting the\nAPP",(0,a.kt)("em",{parentName:"p"},"URL environment variable to your desired domain, and rerun ",(0,a.kt)("inlineCode",{parentName:"em"},"php artisan liap:url"),". Do _not")," manually edit the\nURLs, as that will invalidate the signature."),(0,a.kt)("h2",{id:"validating-a-signed-route-requests"},"Validating a signed route requests"),(0,a.kt)("p",null,"In order to verify that an incoming request has a valid signature, you should set the ",(0,a.kt)("inlineCode",{parentName:"p"},"routing.signed")," key to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="config/liap.php"',title:'"config/liap.php"'},"[\n    'routing' => [\n        'signed' => true, // This is false by default\n    ],\n\n    // .. Other configurations are trimmed\n]\n")),(0,a.kt)("p",null,"If the incoming request does not have a valid signature, the middleware will automatically return a ",(0,a.kt)("inlineCode",{parentName:"p"},"403")," HTTP response."))}u.isMDXComponent=!0}}]);